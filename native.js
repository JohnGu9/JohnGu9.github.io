const delay=e=>new Promise(o=>setTimeout(o,e)),dartFunctions={};function bindFunction(e,o){dartFunctions[e]=o}function onInvokeMethod(obj){switch(obj.method){case"isMobile":return isMobile(obj.arguments);case"isIOS":return isIOS(obj.arguments);case"openFileDialog":return openFileDialog(obj.arguments);case"alert":return alert(obj.arguments);case"reload":return reload(obj.arguments);case"upgrade":return upgrade(obj.arguments);case"openDevTool":return openDevTool(obj.arguments);case"setLogParseFunction":return eval("logParseFunction = "+obj.arguments);case"getBrowserType":return getBrowserType(obj.arguments);case"installPWA":return installPWA(obj.arguments);default:return console.log("NoSuchMethod")}}const invokeDartMethod=(e,o)=>dartFunctions[e](o);class LogParseResult{constructor(e){this.src=e.src,this.dst=e.dst,this.srcInfo=e.srcInfo,this.dstInfo=e.dstInfo,this.intermediate=e.intermediate,this.ueName=e.ueName}}const _errorResult=new LogParseResult({src:null,dst:null,srcInfo:null,dstInfo:null,intermediate:null,ueName:null});function logParseFunctionWrapper(e){try{return new LogParseResult(logParseFunction(e))}catch(e){return _errorResult}}class FileDescriptor{constructor(e,o){this.name=e,this.data=o}}let deferredPrompt;window.addEventListener("beforeinstallprompt",e=>{deferredPrompt=e});const installPWA=e=>{if(null==deferredPrompt)return e.callback(!1);deferredPrompt.prompt(),deferredPrompt.userChoice.then(o=>{e.callback("accepted"===o.outcome)})},isMobile=e=>{e.callback(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))},isIOS=e=>{e.callback(["iPad Simulator","iPhone Simulator","iPod Simulator","iPad","iPhone","iPod"].includes(navigator.platform)||navigator.userAgent.includes("Mac")&&"ontouchend"in document)},getBrowserType=e=>-1!=(navigator.userAgent.indexOf("Opera")||navigator.userAgent.indexOf("OPR"))?e.callback("Opera"):-1!=navigator.userAgent.indexOf("Chrome")?e.callback("Chrome"):-1!=navigator.userAgent.indexOf("Safari")?e.callback("Safari"):-1!=navigator.userAgent.indexOf("Firefox")?e.callback("Firefox"):-1!=navigator.userAgent.indexOf("MSIE")||1==!!document.documentMode?e.callback("IE"):e.callback("unknown"),loadFileAsync=async(e,o)=>{const n=e=>new Promise((o,n)=>{const t=new FileReader;t.onload=(()=>{o(t.result)}),t.onerror=n,t.readAsArrayBuffer(e)}),t=await((e,o)=>new Promise(n=>{const t=document.createElement("input");t.type="file",null!=e&&(t.multiple=e),null!=o&&(t.accept=o);let a=null;const r=document.body.onfocus;t.onchange=(async e=>{null===a&&(a=e.target.files,n(a))}),t.onclick=(()=>{document.body.onfocus=(async()=>{document.body.onfocus=r,await delay(350),null===a&&(console.log("Read-files timeout. "),n(a=[]))})}),t.click()}))(e,o),a=[];for(let e=0;e<t.length;e++){const o=t[e];try{const e=await n(o);a.push(new FileDescriptor(o.name,new Uint8Array(e)))}catch(e){}}return a},openFileDialog=async e=>{const o=await loadFileAsync(e.multiple,e.accept);e.callback(o)},timeout=(e,o)=>{const n=new Promise((e,n)=>{const t=setTimeout(()=>{clearTimeout(t),n("Timed out in "+o+"ms.")},o)});return Promise.race([e,n])},reload=()=>{window.location.reload(!0)},openDevTool=e=>{console.log("openDevTool");try{window.ipcRenderer.send("openDevTool"),e.callback(null)}catch(o){e.callback('Failed to import electron modules. \nWeb application can\'t open DevTool programmatically. \nPress "F12" to explicit open DevTool. ')}},upgrade=async e=>{if(console.log("software is ready to upgrade. "),void 0===window.fs||void 0===window.ipcRenderer||void 0===window.dialog||void 0===window.unzipper||void 0===window.fsExtra||void 0===window.path||void 0===window.dirname)return window.location.reload();const o=window.fs,n=window.dialog,t=window.ipcRenderer,a=window.unzipper,r=window.fsExtra,i=window.path,l=window.dirname;function c(e){return new Promise((o,n)=>{r.ensureDir(e,t=>{t?n(t):o(e)})})}function s(e,o){return new Promise((n,t)=>{r.copy(e,o,function(e){e?t(e):n(o)})})}console.log("modules loaded successfully. "),e.callback("Electron modules loaded"),e.callback("Please select upgrade package");const u=await new Promise(e=>{n.showOpenDialog({filters:[{name:"UPGRADE",extensions:["upgrade"]},{name:"ALL FILE",extensions:["*"]}]},o=>{e(o)})});if(void 0===u||0==u.length)return e.callback(0);const d=u[0];console.log("filePath: "+d);const m=d.replace(/^.*[\\\/]/,"");console.log("fileName: "+m);const g=i.join(l,".cache");console.log("cachePath: "+g);const w=i.join(g,".upgrade"),p=i.join(w,".bak");e.callback("Ensure files directory");try{await timeout(function(e){return new Promise((o,n)=>{r.remove(e,e=>{e?n(e):o(void 0)})})}(w),1e4),await timeout(c(p),15e3)}catch(o){return console.log(o.toString()),e.callback(2)}console.log("Directory clear");const f=i.join(w,m);console.log("unzipFilePath: "+f),e.callback("Extract upgrade code");try{await timeout(function(e,n){return new Promise(t=>{o.createReadStream(e).pipe(a.Extract({path:n})).on("finish",t)})}(d,f),3e4)}catch(o){return console.log(o.toString()),e.callback(3)}console.log("Unzip successfully"),await delay(250),e.callback("Try to backup current version");const b=await function(e){return new Promise((n,t)=>{o.readdir(e,(e,o)=>{e?t(e):n(o)})})}(f);let h=!1;for(const e of b){const n=i.join(l,e);console.log(n);try{if(o.existsSync(n)){const t=i.join(p,e);o.lstatSync(n).isDirectory()?(await timeout(c(t),50),await timeout(s(n,t),100)):await timeout(s(n,t),50)}}catch(e){h=!0,console.log(e.toString())}}h&&(e.callback("Backup operation have some trouble"),await delay(2500)),e.callback("Override code");try{await timeout(s(f,l),1e4)}catch(o){return console.log(o.toString()),e.callback(4)}return e.callback("Upgrade successfully"),await delay(1e3),e.callback("Program will reload in seconds"),await delay(1e3),t.send("reload")};